# vim: ft=sh ts=8

if [ "$UID" -ne 0 ] && [ -z "$SSH_AGENT_PID" ] && [ -z "$SSH_CLIENT" ];then
	echo "[bashrc]: ssh-agent"
	ssh-agent $SHELL
fi

_ls='ls'
_tree='tree'

OS=$(uname -s)
case $OS in
	FreeBSD)	lscolor='-G'
			alias sizer='du -h -d 1 .'
			;;
	Linux)		lscolor='--color=auto'
			;;
	OpenBSD)	_ls='colorls'
			lscolor="-G"
			_tree='colortree'
			;;
esac

## display git branch in prompt
function gitbranch() {
	br=$( git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/' )
	if [ -n "$br" ];then
		echo -e ":[ $br ]"
	fi
}

## vars
export EDITOR='vim'
export VISUAL='vim'
export PAGER='less -R'
export PS1='\u@\h:[\w]$(gitbranch):\$ '
export PS2='â†’  '
export LANG='en_US.UTF-8'
export MYSQL_PS1='(mysql) \u@\h:[ \d ]:% '

FFMPEG_PSP='-profile:v main -level 3 -x264opts ref=3:b-pyramid=none:weightp=1'	## ffmpeg encoding for psp
NTFS3G='noauto,uid=1001,gid=1001,dmask=027,fmask=137'	## mount options for NTFS using ntfs-3g

MDV_THEME='618.9403'	## color theme for 'mdv' console markdown renderer

## ssh vars
UKHFDN='-o UserKnownHostsFile=/dev/null'
SHKC='-o StrictHostKeyChecking=no'
PAPK='-o PreferredAuthentications=publickey'
PAPW='-o PreferredAuthentications=password'

## aliases
alias l="clear;$_ls -F $lscolor;echo"
alias ll="clear;$_ls -AF $lscolor;echo"
alias gls="clear;$_ls -lhF $lscolor;echo"
alias ghls="clear;$_ls -AlhF $lscolor;echo"
alias rls="$_ls -lhF $lscolor"
alias c='clear'
alias e='exit'
alias tree="$_tree -ACF"
alias term_reset='reset;stty erase '
alias unixtime='date "+%s"'
alias isotime='date -u "+%Y-%m-%dT%H:%M:%SZ"'
alias isolocaltime='date "+%Y-%m-%dT%H:%M:%S%z"'

## try to determine JSON_FORMATTER
##	json_reformat:	part of yajl
##	json_xs:	part of perl JSON::XS
if which json_reformat &>/dev/null; then
	JSON_FORMATTER='json_reformat'
elif which json_xs &>/dev/null; then
	JSON_FORMATTER='json_xs'
fi

## completions

## tmux
test -f /usr/local/share/examples/tmux/bash_completion_tmux.sh && . /usr/local/share/examples/tmux/bash_completion_tmux.sh

## virtualenv

export VENV="/usr/local/venv"

function venv() {
	if [ -z "$1" ]; then
		if [ -d .venv ] && [ -f .venv/bin/activate ];then
			. .venv/bin/activate
			return
		elif [ -f venv ];then
			. venv
			return
		fi
		echo "venv: no environment given, no .venv/bin/activate or venv"
		return
	fi
	if [ ! -f $VENV/"$1"/bin/activate ];then
		echo "venv: not a virtualenv: $VENV/$1"
		return
	fi
	. $VENV/"$1"/bin/activate
}

function _venv() {
	unset _venv_words
	for i in $(cd $VENV && ls); do
		_venv_words+="$i "
	done
	COMPREPLY+=( $( compgen -W "$_venv_words" "${COMP_WORDS[1]}" ) )
}

complete -F _venv venv

## terminal titles (i3)

function title() {
	if [ -n "$DISPLAY" ]; then
		## assume i3
		i3-msg title_format "$1" >/dev/null
	else
		echo -ne "\033]0;$1\007"
	fi
}

function title_parent() {
	if [ -n "$DISPLAY" ]; then
		## assume i3
		i3-msg focus parent, title_format "$1", focus child >/dev/null
	fi
}

## other functions

## displaying unique files containing pattern
function find_symbol() {
	s="$1"
	grep -r "$s" * | grep -v 'Binary file' | cut -d':' -f1 | sort -u
}

## wrapper for Vultr API calls using curl
vultr() {
	if [ -z "$VULTR_API_KEY" ]; then
		echo "VULTR_API_KEY not set"
		return
	fi

	data=$( curl -s -H "API-Key: $VULTR_API_KEY" https://api.vultr.com/v1/$@ )

	## format json output, if it is json and we have a formatter defined
	if echo $data | grep -q '^{' && [ -n "$JSON_FORMATTER" ]; then
		echo $data | $JSON_FORMATTER
	else
		echo $data
	fi
}

## load local global config if exists ( $ETC/bash.colvin.local )
test -n "$BASH_SOURCE" && test -f "$BASH_SOURCE.local" && . $BASH_SOURCE.local

## load local user config if exists
test -e $HOME/.bashrc.local && . $HOME/.bashrc.local

colvinrc="HELL YEAH"
